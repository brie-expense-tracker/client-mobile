import React, { useState } from 'react';
import {
	View,
	Text,
	StyleSheet,
	TouchableOpacity,
	ScrollView,
	Alert,
	ActivityIndicator,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import {
	useSharedValue,
	withTiming,
	// withSpring removed - no longer animating progress bars
} from 'react-native-reanimated';
import { useMLServices, MLInsight } from '../../../../src/hooks/useMLServices';
import { useBudget } from '../../../../src/context/budgetContext';
import { useGoal } from '../../../../src/context/goalContext';
import { logChat } from '../../../../src/services/feature/analyticsService';

interface MLInsightsPanelProps {
	onInsightPress?: (insight: MLInsight) => void;
	// showMetrics removed - users don't need to see technical metrics
}

export default function MLInsightsPanel({
	onInsightPress,
}: // showMetrics = true, // removed
MLInsightsPanelProps) {
	const {
		status,
		error,
		getInsights,
		getFinancialHealthScore,
		getSpendingPatterns,
		getBudgetAnalysis,
		getAIInsights,
		getSpendingForecast,
		getUnreadInsightsCount,
		// getMetrics, // removed - users don't need technical metrics
		// clearCache, // removed - users shouldn't clear cache
		isReady,
		reset,
	} = useMLServices();

	const { budgets } = useBudget();
	const { goals } = useGoal();

	const [insights, setInsights] = useState<MLInsight[]>([]);
	const [isGeneratingInsights, setIsGeneratingInsights] = useState(false);
	const [financialHealthScore, setFinancialHealthScore] = useState<{
		score: number;
		grade: string;
		recommendations: string[];
	} | null>(null);
	const [unreadCount, setUnreadCount] = useState(0);
	// showAdvancedMetrics removed - users don't need to see technical details

	// Handle "Why this?" button press
	const handleWhyThis = (insight: MLInsight, index: number) => {
		// Log the insight explanation request
		logChat({
			intent: 'INSIGHT_EXPLANATION',
			usedGrounding: true,
			model: 'localML',
			tokensIn: 0,
			tokensOut: 0,
			hadActions: false,
			hadCard: false,
			fallback: false,
			userSatisfaction: undefined,
			insightId: `ml_insight_${index}`,
			factPackId: `ml_panel_${Date.now()}`,
			insightType: insight.type || 'unknown',
			insightTitle: insight.title || 'Unknown',
			responseTimeMs: 0,
			messageLength: insight.message.length,
			hasFinancialData: true,
		});

		// Show explanation (for now, just an alert - in production this would show detailed reasoning)
		Alert.alert(
			'Why This Insight?',
			'This insight was generated by analyzing your spending patterns, budget utilization, and financial goals using machine learning.',
			[{ text: 'Got it', style: 'default' }]
		);
	};

	// Handle "Mark wrong" button press
	const handleMarkWrong = (insight: MLInsight, index: number) => {
		// Log the insight being marked as wrong
		logChat({
			intent: 'INSIGHT_FEEDBACK',
			usedGrounding: true,
			model: 'localML',
			tokensIn: 0,
			tokensOut: 0,
			hadActions: false,
			hadCard: false,
			fallback: false,
			userSatisfaction: 'thumbs_down',
			insightId: `ml_insight_${index}`,
			factPackId: `ml_panel_${Date.now()}`,
			insightType: insight.type || 'unknown',
			insightTitle: insight.title || 'Unknown',
			dissatisfactionReason: 'insight_incorrect',
			responseTimeMs: 0,
			messageLength: insight.message.length,
			hasFinancialData: true,
		});

		Alert.alert(
			'Insight Marked as Wrong',
			'Thank you for the feedback. This helps us improve our ML insights. The insight has been logged for review.',
			[{ text: 'Got it', style: 'default' }]
		);
	};

	// Animation values
	// progressValue and scaleValue removed - users don't see progress bars or learning indicators
	const scaleValue = useSharedValue(1);

	// Animated styles
	// progressStyle removed - users don't see progress bars
	// scaleStyle removed as it was unused

	// Update progress animation
	React.useEffect(() => {
		if (status.isInitialized) {
			scaleValue.value = withTiming(1.05, {
				duration: 300,
			});
		}
	}, [status.isInitialized, status.localMLConfidence, scaleValue]);

	// Generate insights
	const generateInsights = async () => {
		if (!isReady) return;

		try {
			setIsGeneratingInsights(true);
			const allInsights: MLInsight[] = [];

			// Try to use ML services first
			try {
				// Get basic insights
				const newInsights = await getInsights(
					'Analyze my spending patterns and provide actionable insights',
					'medium'
				);
				allInsights.push(...newInsights);

				// Get financial health score
				try {
					const healthScore = await getFinancialHealthScore();
					setFinancialHealthScore(healthScore);

					// Add health score as an insight
					allInsights.push({
						type: 'info',
						title: `Financial Health: ${healthScore.grade}`,
						message: `Your financial health score is ${
							healthScore.score
						}/100. ${
							healthScore.recommendations[0] || 'Keep up the good work!'
						}`,
						confidence: 0.8,
						actionable: healthScore.recommendations.length > 0,
					});
				} catch (healthError) {
					console.warn(
						'[MLInsightsPanel] Failed to get financial health score:',
						healthError
					);
				}

				// Get spending patterns
				try {
					const patterns = await getSpendingPatterns();

					if (patterns && patterns.length > 0) {
						allInsights.push({
							type: 'pattern',
							title: 'Spending Patterns Detected',
							message: `We've identified ${patterns.length} spending patterns in your recent transactions. Review them to optimize your budget.`,
							confidence: 0.7,
							actionable: true,
						});
					}
				} catch (patternError) {
					console.warn(
						'[MLInsightsPanel] Failed to get spending patterns:',
						patternError
					);
				}

				// Get AI insights
				try {
					const aiInsights = await getAIInsights();
					if (aiInsights && aiInsights.length > 0) {
						// Convert AI insights to ML insights format
						const convertedAIInsights = aiInsights.map((insight: any) => ({
							type: insight.type || 'recommendation',
							title: insight.title || 'AI Insight',
							message:
								insight.message || insight.description || 'No message provided',
							confidence: insight.confidence || 0.7,
							actionable: insight.actionable || false,
						}));
						allInsights.push(...convertedAIInsights);
					}
				} catch (aiError) {
					console.warn('[MLInsightsPanel] Failed to get AI insights:', aiError);
				}

				// Get budget analysis for each budget
				if (budgets && budgets.length > 0) {
					for (const budget of budgets) {
						try {
							const analysis = await getBudgetAnalysis(budget.id);
							if (analysis) {
								allInsights.push({
									type: 'budget',
									title: `Budget Analysis: ${budget.name}`,
									message: `Current utilization: ${Math.round(
										analysis.percentageUsed || 0
									)}%. ${
										analysis.recommendations?.[0] ||
										'Consider reviewing your spending in this category.'
									}`,
									confidence: 0.8,
									actionable: true,
								});
							}
						} catch (budgetError) {
							console.warn(
								`[MLInsightsPanel] Failed to analyze budget ${budget.name}:`,
								budgetError
							);
						}
					}
				}

				// Get spending forecast
				try {
					const forecast = await getSpendingForecast();

					if (forecast && forecast.forecast) {
						allInsights.push({
							type: 'info',
							title: 'Spending Forecast',
							message: `Based on your current spending patterns, you're projected to spend $${forecast.forecast.toFixed(
								2
							)} this month. ${
								forecast.trend === 'increasing'
									? 'Consider reviewing your budget.'
									: "You're on track with your financial goals."
							}`,
							confidence: 0.7,
							actionable: forecast.trend === 'increasing',
						});
					}
				} catch (forecastError) {
					console.warn(
						'[MLInsightsPanel] Failed to get spending forecast:',
						forecastError
					);
				}

				// Get unread insights count
				try {
					const unread = await getUnreadInsightsCount();
					setUnreadCount(unread);
				} catch (unreadError) {
					console.warn(
						'[MLInsightsPanel] Failed to get unread count:',
						unreadError
					);
				}

				setInsights(allInsights);
			} catch (mlError) {
				console.warn(
					'[MLInsightsPanel] ML services failed, generating basic insights:',
					mlError
				);

				// Generate basic insights based on available data
				const basicInsights: MLInsight[] = [
					{
						type: 'recommendation',
						title: 'Basic Financial Overview',
						message:
							'Your financial data is loaded and ready for analysis. The ML services are currently in basic mode.',
						confidence: 0.5,
						actionable: false,
					},
				];

				if (budgets && budgets.length > 0) {
					basicInsights.push({
						type: 'budget',
						title: 'Budget Summary',
						message: `You have ${budgets.length} active budgets. Consider reviewing your spending against these budgets regularly.`,
						confidence: 0.7,
						actionable: true,
					});
				}

				if (goals && goals.length > 0) {
					basicInsights.push({
						type: 'goal',
						title: 'Goal Progress',
						message: `You have ${goals.length} financial goals. Track your progress and adjust your savings strategy as needed.`,
						confidence: 0.7,
						actionable: true,
					});
				}

				setInsights(basicInsights);
			}

			// Animate success
			scaleValue.value = withTiming(1.05, { duration: 200 }, () => {
				scaleValue.value = withTiming(1, { duration: 200 });
			});
		} catch {
			Alert.alert('Error', 'Failed to generate insights. Please try again.');
		} finally {
			setIsGeneratingInsights(false);
		}
	};

	// Clear cache functionality removed - users shouldn't have access to technical operations

	// Get insight icon
	const getInsightIcon = (type: MLInsight['type']) => {
		switch (type) {
			case 'spending':
				return 'trending-down';
			case 'budget':
				return 'wallet';
			case 'goal':
				return 'flag';
			case 'pattern':
				return 'analytics';
			case 'recommendation':
				return 'bulb';
			case 'warning':
				return 'warning';
			case 'info':
				return 'information-circle';
			case 'suggestion':
				return 'bulb';
			default:
				return 'information-circle';
		}
	};

	// Get insight color
	const getInsightColor = (type: MLInsight['type']) => {
		switch (type) {
			case 'spending':
				return '#ef4444';
			case 'budget':
				return '#3b82f6';
			case 'goal':
				return '#10b981';
			case 'pattern':
				return '#8b5cf6';
			case 'recommendation':
				return '#f59e0b';
			case 'warning':
				return '#f97316';
			case 'info':
				return '#06b6d4';
			case 'suggestion':
				return '#84cc16';
			default:
				return '#6b7280';
		}
	};

	if (!isReady) {
		return (
			<View style={styles.container}>
				<View style={styles.loadingContainer}>
					<ActivityIndicator size="large" color="#3b82f6" />
					<Text style={styles.loadingText}>Initializing ML Services...</Text>
					{error && (
						<View style={styles.errorContainer}>
							<Text style={styles.errorText}>{error}</Text>
							<TouchableOpacity
								style={styles.retryButton}
								onPress={() => {
									// Reset error and try to initialize again
									reset();
								}}
							>
								<Text style={styles.retryButtonText}>Retry</Text>
							</TouchableOpacity>

							{/* Fallback mode button */}
							<TouchableOpacity
								style={[
									styles.retryButton,
									{ backgroundColor: '#10b981', marginTop: 8 },
								]}
								onPress={() => {
									// Force basic mode
									// The emergency timeout in useMLServices will handle this
								}}
							>
								<Text style={styles.retryButtonText}>Use Basic Mode</Text>
							</TouchableOpacity>
						</View>
					)}

					{/* Show loading progress */}
					<Text style={styles.loadingSubtext}>
						This may take a few seconds on first launch...
					</Text>
				</View>
			</View>
		);
	}

	return (
		<ScrollView style={styles.container} showsVerticalScrollIndicator={false}>
			{/* Header */}
			<View style={styles.header}>
				<View style={styles.headerLeft}>
					<Ionicons name="analytics" size={24} color="#3b82f6" />
					<Text style={styles.headerTitle}>AI Insights</Text>
					{unreadCount > 0 && (
						<View style={styles.unreadBadge}>
							<Text style={styles.unreadText}>{unreadCount}</Text>
						</View>
					)}
				</View>
				<TouchableOpacity
					style={styles.generateButton}
					onPress={generateInsights}
					disabled={isGeneratingInsights}
				>
					{isGeneratingInsights ? (
						<ActivityIndicator size="small" color="white" />
					) : (
						<Ionicons name="refresh" size={16} color="white" />
					)}
					<Text style={styles.generateButtonText}>
						{isGeneratingInsights ? 'Generating...' : 'Generate'}
					</Text>
				</TouchableOpacity>
			</View>

			{/* Financial Health Score */}
			{financialHealthScore && (
				<View style={styles.healthScoreContainer}>
					<Text style={styles.sectionTitle}>Financial Health</Text>
					<View style={styles.healthScoreCard}>
						<View style={styles.healthScoreHeader}>
							<View style={styles.healthScoreCircle}>
								<Text style={styles.healthScoreNumber}>
									{financialHealthScore.score}
								</Text>
								<Text style={styles.healthScoreOutOf}>/100</Text>
							</View>
							<View style={styles.healthScoreInfo}>
								<Text style={styles.healthScoreGrade}>
									{financialHealthScore.grade}
								</Text>
								<Text style={styles.healthScoreLabel}>Overall Score</Text>
							</View>
						</View>
						{financialHealthScore.recommendations.length > 0 && (
							<View style={styles.recommendationsContainer}>
								<Text style={styles.recommendationsTitle}>
									Recommendations:
								</Text>
								{financialHealthScore.recommendations
									.slice(0, 2)
									.map((rec, index) => (
										<Text key={index} style={styles.recommendationText}>
											• {rec}
										</Text>
									))}
							</View>
						)}
					</View>
				</View>
			)}

			{/* Insights */}
			{insights.length > 0 && (
				<View style={styles.insightsContainer}>
					<Text style={styles.sectionTitle}>Generated Insights</Text>

					{insights.map((insight, index) => (
						<TouchableOpacity
							key={index}
							style={styles.insightCard}
							onPress={() => onInsightPress?.(insight)}
							activeOpacity={0.7}
						>
							<View style={styles.insightHeader}>
								<View style={styles.insightIconContainer}>
									<Ionicons
										name={getInsightIcon(insight.type)}
										size={20}
										color={getInsightColor(insight.type)}
									/>
								</View>
								<View style={styles.insightMeta}>
									<Text style={styles.insightTitle}>{insight.title}</Text>
									<Text style={styles.insightType}>
										{insight.type.charAt(0).toUpperCase() +
											insight.type.slice(1)}
									</Text>
								</View>
								{/* Confidence badge removed - users don't need to see technical confidence scores */}
							</View>

							<Text style={styles.insightMessage}>{insight.message}</Text>

							{insight.actionable && (
								<View style={styles.actionableIndicator}>
									<Ionicons name="checkmark-circle" size={16} color="#10b981" />
									<Text style={styles.actionableText}>Actionable</Text>
								</View>
							)}

							{/* Grounding & Guardrails: Why this? + Mark wrong buttons */}
							<View style={styles.insightActions}>
								<TouchableOpacity
									style={styles.actionButton}
									onPress={() => handleWhyThis(insight, index)}
								>
									<Ionicons
										name="help-circle-outline"
										size={14}
										color="#6b7280"
									/>
									<Text style={styles.actionButtonText}>Why this?</Text>
								</TouchableOpacity>

								<TouchableOpacity
									style={[styles.actionButton, styles.markWrongButton]}
									onPress={() => handleMarkWrong(insight, index)}
								>
									<Ionicons
										name="close-circle-outline"
										size={14}
										color="#ef4444"
									/>
									<Text style={[styles.actionButtonText, styles.markWrongText]}>
										Mark wrong
									</Text>
								</TouchableOpacity>
							</View>
						</TouchableOpacity>
					))}
				</View>
			)}

			{/* Advanced Metrics - REMOVED for user privacy */}
			{/* Users don't need to see technical learning progress */}

			{/* Empty State */}
			{insights.length === 0 && !isGeneratingInsights && (
				<View style={styles.emptyState}>
					<Ionicons name="bulb-outline" size={48} color="#d1d5db" />
					<Text style={styles.emptyStateTitle}>No Insights Yet</Text>
					<Text style={styles.emptyStateText}>
						Tap &quot;Generate&quot; to get AI-powered financial insights based
						on your data
					</Text>
				</View>
			)}
		</ScrollView>
	);
}

const styles = StyleSheet.create({
	container: {
		flex: 1,
		backgroundColor: '#ffffff',
	},

	// Header
	header: {
		flexDirection: 'row',
		justifyContent: 'space-between',
		alignItems: 'center',
		padding: 16,
		borderBottomWidth: 1,
		borderBottomColor: '#f3f4f6',
	},
	headerLeft: {
		flexDirection: 'row',
		alignItems: 'center',
	},
	headerTitle: {
		fontSize: 20,
		fontWeight: '600',
		color: '#111827',
		marginLeft: 8,
	},
	generateButton: {
		flexDirection: 'row',
		alignItems: 'center',
		backgroundColor: '#3b82f6',
		paddingHorizontal: 16,
		paddingVertical: 8,
		borderRadius: 8,
	},
	generateButtonText: {
		color: 'white',
		fontWeight: '500',
		marginLeft: 6,
	},

	// Loading
	loadingContainer: {
		flex: 1,
		justifyContent: 'center',
		alignItems: 'center',
		padding: 32,
	},
	loadingText: {
		fontSize: 16,
		color: '#6b7280',
		marginTop: 16,
	},
	errorText: {
		color: '#ef4444',
		fontSize: 14,
		textAlign: 'center',
		marginTop: 8,
	},
	errorContainer: {
		marginTop: 16,
		alignItems: 'center',
	},
	retryButton: {
		backgroundColor: '#3b82f6',
		paddingVertical: 8,
		paddingHorizontal: 16,
		borderRadius: 8,
		marginTop: 8,
	},
	retryButtonText: {
		color: 'white',
		fontWeight: '500',
		fontSize: 14,
	},
	loadingSubtext: {
		fontSize: 14,
		color: '#9ca3af',
		marginTop: 8,
	},

	// Status styles removed - users don't see technical status information

	sectionTitle: {
		fontSize: 18,
		fontWeight: '600',
		color: '#111827',
		marginBottom: 16,
	},

	// Progress styles removed - users don't see learning progress bar

	// Insights
	insightsContainer: {
		padding: 16,
	},
	insightCard: {
		backgroundColor: '#ffffff',
		borderRadius: 12,
		padding: 16,
		marginBottom: 12,
		borderWidth: 1,
		borderColor: '#f3f4f6',
		shadowColor: '#000',
		shadowOffset: { width: 0, height: 1 },
		shadowOpacity: 0.05,
		shadowRadius: 2,
		elevation: 2,
	},
	insightHeader: {
		flexDirection: 'row',
		alignItems: 'center',
		marginBottom: 12,
	},
	insightIconContainer: {
		width: 40,
		height: 40,
		borderRadius: 20,
		backgroundColor: '#f3f4f6',
		justifyContent: 'center',
		alignItems: 'center',
		marginRight: 12,
	},
	insightMeta: {
		flex: 1,
	},
	insightTitle: {
		fontSize: 16,
		fontWeight: '600',
		color: '#111827',
		marginBottom: 2,
	},
	insightType: {
		fontSize: 12,
		color: '#6b7280',
		textTransform: 'capitalize',
	},
	insightMessage: {
		fontSize: 14,
		color: '#374151',
		lineHeight: 20,
		marginBottom: 12,
	},
	actionableIndicator: {
		flexDirection: 'row',
		alignItems: 'center',
	},
	actionableText: {
		fontSize: 12,
		color: '#10b981',
		marginLeft: 6,
		fontWeight: '500',
	},

	// Empty State
	emptyState: {
		alignItems: 'center',
		padding: 32,
		marginTop: 32,
	},
	emptyStateTitle: {
		fontSize: 18,
		fontWeight: '600',
		color: '#6b7280',
		marginTop: 16,
		marginBottom: 8,
	},
	emptyStateText: {
		fontSize: 14,
		color: '#9ca3af',
		textAlign: 'center',
		lineHeight: 20,
	},

	// Grounding & Guardrails styles
	insightActions: {
		flexDirection: 'row',
		gap: 8,
		marginTop: 12,
	},
	actionButton: {
		flexDirection: 'row',
		alignItems: 'center',
		backgroundColor: '#e0e7ff',
		borderRadius: 8,
		paddingVertical: 6,
		paddingHorizontal: 12,
		gap: 4,
	},
	actionButtonText: {
		fontSize: 12,
		fontWeight: '600',
		color: '#3b82f6',
	},
	markWrongButton: {
		backgroundColor: '#fef2f2',
	},
	markWrongText: {
		color: '#ef4444',
	},

	// Unread badge
	unreadBadge: {
		backgroundColor: '#ef4444',
		borderRadius: 10,
		minWidth: 20,
		height: 20,
		justifyContent: 'center',
		alignItems: 'center',
		marginLeft: 8,
	},
	unreadText: {
		color: 'white',
		fontSize: 12,
		fontWeight: '600',
	},

	// Financial Health Score
	healthScoreContainer: {
		padding: 16,
	},
	healthScoreCard: {
		backgroundColor: '#ffffff',
		borderRadius: 12,
		padding: 16,
		borderWidth: 1,
		borderColor: '#f3f4f6',
		shadowColor: '#000',
		shadowOffset: { width: 0, height: 1 },
		shadowOpacity: 0.05,
		shadowRadius: 2,
		elevation: 2,
	},
	healthScoreHeader: {
		flexDirection: 'row',
		alignItems: 'center',
		marginBottom: 12,
	},
	healthScoreCircle: {
		width: 60,
		height: 60,
		borderRadius: 30,
		backgroundColor: '#f0f9ff',
		justifyContent: 'center',
		alignItems: 'center',
		marginRight: 16,
		borderWidth: 2,
		borderColor: '#3b82f6',
	},
	healthScoreNumber: {
		fontSize: 20,
		fontWeight: '700',
		color: '#3b82f6',
	},
	healthScoreOutOf: {
		fontSize: 12,
		color: '#6b7280',
		marginTop: -2,
	},
	healthScoreInfo: {
		flex: 1,
	},
	healthScoreGrade: {
		fontSize: 18,
		fontWeight: '600',
		color: '#111827',
		marginBottom: 4,
	},
	healthScoreLabel: {
		fontSize: 14,
		color: '#6b7280',
	},
	recommendationsContainer: {
		marginTop: 8,
		paddingTop: 12,
		borderTopWidth: 1,
		borderTopColor: '#f3f4f6',
	},
	recommendationsTitle: {
		fontSize: 14,
		fontWeight: '600',
		color: '#374151',
		marginBottom: 6,
	},
	recommendationText: {
		fontSize: 13,
		color: '#6b7280',
		lineHeight: 18,
		marginBottom: 2,
	},
});
